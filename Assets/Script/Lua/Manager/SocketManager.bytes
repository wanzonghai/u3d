SocketManager = Class("SocketManager")
-- local SocketManager = require "Config/Socket"
local this = SocketManager

-- 获取单例实例
function this:GetInstance()
    if nil == self.m_Instance then
        self.m_Instance = self:New()
    end
    return self.m_Instance
end

-- 构造函数
function this:ctor()
    -- 初始化连接状态和回调表
    self.isConnected = false
    self.callbacks = {}
    self.host = nil
    self.port = nil
end

-- 连接到服务器
function this:Connect(host, port, onSuccess, onError)
    -- 存储host和port
    self.host = host
    self.port = port

    -- 尝试连接到服务器
    local success, err = pcall(function()
        -- 连接代码示例（替换为实际连接代码）
        -- network.connect(host, port)
        self.isConnected = true
        print("Connected to server at " .. host .. ":" .. port)
        
        -- 如果有成功回调，调用它
        if onSuccess then
            onSuccess()
        end
    end)

    -- 如果连接失败，处理错误
    if not success then
        self.isConnected = false
        print("Failed to connect to server: " .. err)

        -- 如果有错误回调，调用它
        if onError then
            onError(err)
        end
    end
end

-- 主动断开连接
function this:Disconnect()
    if self.isConnected then
        -- 尝试断开连接
        local success, err = pcall(function()
            -- 假设使用某种网络库断开连接
            -- network.disconnect()
            self.isConnected = false
            print("Disconnected from server at " .. self.host .. ":" .. self.port)
        end)

        -- 如果断开失败，打印错误
        if not success then
            print("Failed to disconnect from server: " .. err)
        end
    else
        print("No active connection to disconnect.")
    end
end

-- 发送数据
function this:Send(messageType, messageData)
    if self.isConnected then
        -- 尝试发送数据
        local success, err = pcall(function()
            -- 发送代码示例（替换为实际发送代码）
            -- network.send(messageType, messageData)
            print("Sending message:", messageType, messageData)
        end)

        -- 如果发送失败，打印错误
        if not success then
            print("Failed to send message: " .. err)
        end
    else
        print("Cannot send message. Not connected to the server.")
    end
end

-- 注册接收数据的回调
function this:Receive(messageType, callback)
    if type(callback) == "function" then
        self.callbacks[messageType] = callback
    else
        print("Invalid callback function for message type:", messageType)
    end
end

-- 处理收到的数据
function this:OnReceive(messageType, messageData)
    local callback = self.callbacks[messageType]
    if callback then
        local success, err = pcall(function()
            callback(messageData)
        end)

        if not success then
            print("Error in message callback for " .. messageType .. ": " .. err)
        end
    else
        print("No handler for message type:", messageType)
    end
end

-- 清理并销毁SocketManager
function this:OnDestroy()
    if self.isConnected then
        self:Disconnect()
    end

    -- 清理回调
    self.callbacks = {}
    print("SocketManager destroyed and callbacks cleared.")
end
