MainScene = Class("MainScene",SceneBase)
local this = MainScene

MainScene.PosX = -0.42
MainScene.PosY = 0.3
MainScene.CupboardCnt = 18          --固定18个规则
MainScene.NumberThree = 3    --一个柜子放多少个道具
MainScene.FollowPosZ = 0.085
MainScene.PosZ = 0.08
MainScene.PosFront = GameUtils.Vector3(0,0,MainScene.PosZ)
MainScene.PosBehive = GameUtils.Vector3(0,0,-MainScene.PosZ)
MainScene.NormalColor = GameUtils.color(1,1,1,1)
MainScene.GrayColor = GameUtils.color(180/255,180/255,180/255,1)
MainScene.AdditionTime = 60
MainScene.FreezeTime = 30
MainScene.TipsPos = {
    [1] = GameUtils.Vector3(-1.208,0.813,0.03),
    [2] = GameUtils.Vector3(-1.068,0.813,0.03),
    [3] = GameUtils.Vector3(-0.928,0.813,0.03),
}

local LuaUIUtils = CS.LuaUIUtils
local LevelConfig = require "Config/Level"
local SoundConfig = require "Config/Sound"
local GameObject = CS.UnityEngine.GameObject
local ABDownLoader = CS.ABDownLoader
local ABDLManager = CS.ABDLManager:GetInstance()

function this:ctor(id)
	this.super.ctor(self, id)
    self.cupboardRoot = nil
    self.cupboradPrefab = nil
    self.cupboardUnitList = {}

    self.curScore = 0   --消除一组加1
    self.clearUpCount = 0       --已消除数量
    self.levelMgr = nil
end

function this:Start()
    this.super.Start(self)
    --[[self.mainCamera = CS.UnityEngine.GameObject.Find("Main Camera"):GetComponent("Camera")
    self.mainCamera.orthographicSize = 0.48 * SceneManager:GetInstance().rate]]--
    self.freezeCount = PlayerPrefsUtils.GetCurFreezeCount()
    self.disorderCount = PlayerPrefsUtils.GetCurDisorderCount()
    self.tipsCount = PlayerPrefsUtils.GetCurTipsCount()

    local scaleValue = 1.2 * SceneManager:GetInstance().rate
    GameObject.Find("GameX3_Beijing_Mo").transform.localScale = GameUtils.Vector3(scaleValue,scaleValue,1)
    WindowManager:GetInstance():Open(Windows.MainView)
end

function this:StartRound(levelId)
	self.curLevelId = levelId
    self.cfgLevel = LevelConfig[levelId]
    WindowManager:GetInstance():Open(Windows.JoystickView)

    self.curScore = 0
    WindowManager:GetInstance():GetServerByName(Windows.GameView):StartRound(levelId)
end

function this:AddTime(time)
    WindowManager:GetInstance():GetServerByName(Windows.GameView):AddTime(time)
end

function this:StartNextLevel()
    if self.levelMgr then self.levelMgr:Destroy() self.levelMgr = nil end
    self:StartRound(self.curLevelId + 1)
end

function this:Restart()
   if self.levelMgr then self.levelMgr:Destroy() self.levelMgr = nil end
   self:StartRound(self.curLevelId)
end

function this:BackToMainView()
    if self.levelMgr then self.levelMgr:Destroy() self.levelMgr = nil end
    WindowManager:GetInstance():Close(Windows.GameView)
    WindowManager:GetInstance():Open(Windows.MainView)
end

--道具消除
function this:OnItemEliminate()
    self.curScore = self.curScore + 1
    self.levelMgr:OnItemEliminate()
    EventDispatcher:GetInstance():DispatchEvent(EventID.LevelScoreChange,self.curScore)
end

function this:FinishLevel(isPass)
    WindowManager:GetInstance():GetServerByName(Windows.GameView):Stop()
    WindowManager:GetInstance():Open(isPass and Windows.AccountPassView or Windows.AccountFailView,WindowType.Stack,nil)
    if isPass then PlayerPrefsUtils.SetCurLevelId(self.curLevelId) end
end

function this:Freeze()
    self:AddTime(MainScene.FreezeTime)
    self:SetFreezeCount(self.freezeCount - 1)
end

function this:Disorder()
    self.levelMgr:Disorder()
    self:SetDisorderCount(self.disorderCount - 1)
end

function this:Tips()
    self.levelMgr:Tips()
    self:SetTipsCount(self.tipsCount - 1)
end

function this:OnDestroy()
    this.super.OnDestroy(self)
end

function this:CreateCupboard()
    if not self.cupboardRoot then
        local abDownLoader = ABDownLoader("Art/images/Prefab/Huojia01.prefab",ABDLUtils.Inventory,true)
        abDownLoader:Load(function(transform)
            self.cupboradPrefab = ABDLManager:GetAsset("Art/images/Prefab/Huojia01.prefab",ABDLUtils.Inventory)
            self.cupboardRoot = GameObject("Root")
            local idx
            for i=1,MainScene.CupboardCnt do
                local obj = GameObject.Instantiate(self.cupboradPrefab)
                local tf = obj.transform
                obj.name = i
                tf:SetParent(self.cupboardRoot.transform)
                local unit = CupboardUnit.New(tf,i,self)
                idx = (i % MainScene.NumberThree)
                idx = idx == 0 and MainScene.NumberThree or idx
                tf.localPosition = GameUtils.Vector3(idx * MainScene.PosX,(math.ceil(i / MainScene.NumberThree) - 1) * MainScene.PosY)
                unit:Init()
                unit:SetConfig(self.cfgLevel["grid" .. i])
                table.insert(self.cupboardUnitList,unit)
            end

            self:CreateLevel()
        end)
    else
        self:CreateLevel()
    end
end

function this:LoadBenDai(cb)
    if not self.bendaiPrefab then
        local abDownLoader = ABDownLoader("Art/images/Prefab/Bendai.prefab",ABDLUtils.Inventory,true)
        abDownLoader:Load(function(transform)
            self.bendaiPrefab = ABDLManager:GetAsset("Art/images/Prefab/Bendai.prefab",ABDLUtils.Inventory)
            cb(GameObject.Instantiate(self.bendaiPrefab))
        end)
    else
        cb(GameObject.Instantiate(self.bendaiPrefab))
    end
end

function this:SetClearUpCount(value)
    if self.clearUpCount == value then return end
    self.clearUpCount = value
end

function this:GetClearUpCount()
    return self.curClearUpCount
end

function this:CreateLevel()
    if self.levelMgr then self.levelMgr:Destroy() self.levelMgr = nil end
    self.levelMgr = LevelMgr.New(self.cfgLevel,self)
end

function this:SetFreezeCount(value)
    if self.freezeCount == value then return end
    self.freezeCount = value
    PlayerPrefsUtils.SetCurFreezeCount(value)
    EventDispatcher:GetInstance():DispatchEvent(EventID.FreezeCountChange,value)
end

function this:SetDisorderCount(value)
    if self.disorderCount == value then return end
    self.disorderCount = value
    PlayerPrefsUtils.SetCurDisorderCount(value)
    EventDispatcher:GetInstance():DispatchEvent(EventID.DisorderCountChange,value)
end

function this:SetTipsCount(value)
    if self.tipsCount == value then return end
    self.tipsCount = value
    PlayerPrefsUtils.SetCurTipsCount(value)
    EventDispatcher:GetInstance():DispatchEvent(EventID.TipsCountChange,value)
end

function this:RestartCountDown()
    WindowManager:GetInstance():GetServerByName(Windows.GameView):Restart()
end

--播放广告
function this:PlayAdvertisement(cb)
    if cb then
        cb(true)
    end
end