ItemUnit = Class("ItemUnit")
local this = ItemUnit

local LuaUtils = CS.LuaUtils
local ItemConfig = require "Config/Item"
local LuaUIUtils = CS.LuaUIUtils

function this:ctor(id,pos,isGray,parent,group,idx)
    self.itemId = id
    self.pos = pos
    self.isGray = isGray
    self.parent = parent
    self.group = group
    self.index = idx
    self.cfgItem = ItemConfig[id]
    if not self.cfgItem then
        return
    end
    self.transform = nil
    self:OnCreate()
end

function this:OnCreate()
    
    PoolManager:GetInstance():Take(self.cfgItem.path,self,function(transform)
        -- if not transform then
        --     L.LogError("Transform is nil.")
        --     return
        -- end
        self.transform = transform    
        transform:SetParent(self.parent)
        self:SetLocalPosition(self.pos)
        -- 获取 Outline 组件
        self.outline = transform:GetComponent(typeof(CS.Outline))

        -- if self.outline then
        --     print("Outline component found, disabling it.")
        --     self.outline.enabled = false  -- 初始时禁用 Outline
        -- else
        --     print("Outline component not found.")
        -- end
        self:SetGray(self.isGray)
    end)
end

function this:SetGray(isGray)
    -- if not self.transform then
    --     L.LogError("Transform is nil, cannot set gray.")
    --     -- Optionally, you could still attempt to set some default behavior or appearance here
    --     return
    -- end

    -- -- Ensure the MeshRenderer component is available
    -- local renderer = self.transform:GetComponent("MeshRenderer")
    -- if not renderer then
    --     L.LogError("MeshRenderer component is missing on the transform.")
    --     return
    -- end
  
    -- LuaUtils.SetMeshRendererColor(self.transform,"_BaseColor",isGray and MainScene.GrayColor or MainScene.NormalColor)
    local color = MainScene.NormalColor
    -- local grayColor = { r = 0x4c / 255, g = 0x4c / 255, b = 0x4c / 255, a = 1 }
    local grayColor = { r = 113 / 255, g = 113 / 255, b = 113 / 255, a = 1 }
    if isGray then
        color = grayColor
    end
    LuaUtils.SetMeshRendererColor(self.transform, "_BaseColor", color)
    if self.outline then
        self.outline.enabled = not isGray  -- 激活 Outline
    end
end

function this:SetParent(group,idx,parent)
    self.parent = parent
    self.group = group
    self.index = idx
    self.transform:SetParent(self.parent)
    self:SetLocalPosition(MainScene.PosFront)
end

function this:SetLocalPosition(pos)
    self.transform.localPosition = pos
end

function this:GetPosY()
    if not self.transform then
        return
    end
    return self.transform.position.x
end

function this:GetDistance(pos)
    return math.abs(self.transform.position.x - pos.x)
end

function this:OnMouseDown(pos)
    SoundManager:GetInstance():Play(8)
    self:FollowTarget(pos)
end

function this:OnMouseDrag(pos)
    self:FollowTarget(pos)
end

function this:OnMouseUp()
   
    self:SetLocalPosition(MainScene.PosFront)
end

function this:FollowTarget(pos)
    if not self.transform then
        L.LogError("self.transform is nil");
        return
    end
    self.transform.position = GameUtils.Vector3(pos.x,pos.y,MainScene.FollowPosZ)
end

function this:Eliminate()
    self:DestroyTweener()
    self.tweener = LuaUIUtils.DoScale(self.transform,GameUtils.Vector3(1.2,1.2,1.2),0.1)
    LuaUIUtils.OnComplete(self.tweener,function()
        self.tweener = LuaUIUtils.DoScale(self.transform,GameUtils.Vector3(0.7,0.7,0.7),0.05)
        LuaUIUtils.OnComplete(self.tweener,function()
            self.tweener = nil
            self:Destroy()
        end)
    end)
end

function this:ShowFront()
    if not self.isGray then return end
    self:SetGray(false)
    self:DestroyTweener()
    self.tweener = LuaUIUtils.DoLocalMoveZ(self.transform,MainScene.PosZ,0.1)
    LuaUIUtils.OnComplete(self.tweener,function()
        self.tweener = nil
    end)
end

function this:DestroyTweener()
    if self.tweener then LuaUIUtils.Kill(self.tweener) self.tweener = nil end
end

--提示消除
function this:OnTips(idx)
    self.transform:SetParent(nil)
    self:SetGray(false)
    self.transform.position = GameUtils.Vector3(self.transform.position.x,self.transform.position.y,0.03)
    self:DestroyTweener()
    self.tweener = LuaUIUtils.DoMove(self.transform,MainScene.TipsPos[idx],0.2)
    LuaUIUtils.OnComplete(self.tweener,function()
        self.timer = Timer.New(self,0.2,function()
            self.timer = nil
            self:Destroy()
        end,1)
    end)
end

function this:Destroy()
    self:DestroyTweener()
    if self.timer then self.timer:OnDestroy() self.timer = nil end
    PoolManager:GetInstance():Back(self)
end